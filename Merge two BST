    void Insert(Node *root, stack<Node*> &s)
    {
        while(root!=NULL)
        {
            s.push(root);
            root=root->left;
       }
    }
    vector<int> merge(Node *root1, Node *root2)
    {
        //Your code here
        stack<Node*> s1, s2;
        Insert(root1, s1);
        Insert(root2, s2);
        vector<int> ans;
        while(!s1.empty() || !s2.empty())
        {
            int t1 = s1.empty() ? INT_MAX : s1.top()->data;
            int t2 = s2.empty() ? INT_MAX : s2.top()->data;
            if(t1<=t2)
            {
                ans.push_back(t1);
                Node *curr=s1.top();
                s1.pop();
                Insert(curr->right, s1);
            }
            else
            {
                ans.push_back(t2);
                Node *curr=s2.top();
                s2.pop();
                Insert(curr->right, s2);
            }
        }
        return ans;
    }  
    
    Time Complexity  : O(n + m)
    Space Complexity : O(h1 + h2)
